#!/usr/bin/env python3
"""Generate the Hugging Face ecosystem quick picks table for README and docs."""
from __future__ import annotations

import argparse
import os
import sys
import textwrap
import urllib.request
from pathlib import Path
from typing import Dict, List, Tuple

ROOT = Path(__file__).resolve().parents[1]
ECOSYSTEM_YAML = ROOT / "meta" / "ecosystem.yml"
README = ROOT / "README.md"
DOCS_PAGE = ROOT / "docs" / "ecosystem.md"

MARKER_START = "<!-- ECOSYSTEM:START -->"
MARKER_END = "<!-- ECOSYSTEM:END -->"
MARKER_NOTE = "<!-- generated by /scripts/build_ecosystem.py ; do not edit manually -->"
def _parse_inline_row(text: str) -> Dict[str, str]:
    if text.startswith("- "):
        text = text[2:]
    if text.startswith("{") and text.endswith("}"):
        text = text[1:-1]

    parts: List[str] = []
    current = []
    in_quotes = False
    for char in text:
        if char == '"' and (not current or current[-1] != "\\"):
            in_quotes = not in_quotes
        if char == "," and not in_quotes:
            parts.append("".join(current).strip())
            current = []
        else:
            current.append(char)
    if current:
        parts.append("".join(current).strip())

    row: Dict[str, str] = {}
    for part in parts:
        if not part:
            continue
        key, value = part.split(":", 1)
        key = key.strip()
        value = value.strip().strip('"')
        row[key] = value
    return row


def load_yaml(path: Path) -> Dict[str, object]:
    try:
        import yaml  # type: ignore

        with path.open("r", encoding="utf-8") as handle:
            return yaml.safe_load(handle)
    except Exception:  # noqa: BLE001
        # Fallback lightweight parser tailored for the ecosystem schema.
        data: Dict[str, object] = {"categories": []}
        categories: List[Dict[str, object]] = []
        current_cat: Dict[str, object] | None = None
        with path.open("r", encoding="utf-8") as handle:
            for raw_line in handle:
                line = raw_line.rstrip()
                stripped = line.strip()
                if not stripped or stripped.startswith("#"):
                    continue
                if stripped.startswith("last_reviewed:"):
                    value = stripped.split(":", 1)[1].strip().strip('"')
                    data["last_reviewed"] = value
                elif stripped.startswith("- name:"):
                    name = stripped.split(":", 1)[1].strip().strip('"')
                    current_cat = {"name": name, "rows": []}
                    categories.append(current_cat)
                elif stripped.startswith("rows:"):
                    continue
                elif stripped.startswith("- {") and current_cat is not None:
                    row = _parse_inline_row(stripped)
                    current_cat.setdefault("rows", []).append(row)
        data["categories"] = categories
        return data


def validate_links(rows: List[Tuple[str, str]]) -> None:
    for library, url in rows:
        try:
            request = urllib.request.Request(url, method="HEAD")
            with urllib.request.urlopen(request, timeout=10):  # noqa: S310
                pass
        except Exception as exc:  # noqa: BLE001
            print(f"[ecosystem] Warning: could not validate {library} -> {url}: {exc}", file=sys.stderr)


def build_table(data: Dict) -> Tuple[str, str, List[Tuple[str, str]]]:
    categories = data.get("categories", [])
    link_rows: List[Tuple[str, str]] = []

    header = "| Category | Library | What itâ€™s for | Where it fits |\n|---|---|---|---|\n"
    lines: List[str] = [header]

    for category in categories:
        cat_name = category["name"]
        rows = category.get("rows", [])
        for idx, row in enumerate(rows):
            library = row["library"]
            link = row["link"]
            what = row["what"]
            fit = row["fit"]
            link_rows.append((library, link))

            category_cell = cat_name if idx == 0 else ""
            library_cell = f"[{library}]({link})"
            lines.append(f"| {category_cell} | {library_cell} | {what} | {fit} |\n")

    table_md = "".join(lines)
    return data["last_reviewed"], table_md, link_rows


def replace_section(readme_text: str, table_md: str, date_str: str) -> str:
    header_line = "## ðŸ§© Hugging Face Ecosystem â€” Dev Quick Picks"
    if header_line not in readme_text:
        raise SystemExit("Ecosystem header not found in README.md. Insert the section scaffold first.")

    section = "\n".join(
        [
            header_line,
            f"<sub>Last reviewed: {date_str}</sub>",
            "<br>",
            "<sup>Opinionated, regularly used pieces that pair well with ðŸ¤—. Links go to official docs where possible.</sup>",
            "",
            MARKER_START,
            MARKER_NOTE,
            table_md.strip(),
            MARKER_END,
            "",
            "How to suggest a library: [open an issue](https://github.com/SSusantAchary/Hands-On-Huggingface-AI-Models/issues/new?template=01-suggest-ecosystem-library.md).",
            "",
        ]
    )

    start_idx = readme_text.index(header_line)
    suggestion_phrase = "How to suggest a library"
    suggestion_idx = readme_text.find(suggestion_phrase, start_idx)
    if suggestion_idx == -1:
        raise SystemExit("Suggestion line not found in README.md ecosystem section.")
    after_idx = readme_text.find("\n", suggestion_idx)
    if after_idx == -1:
        after_idx = len(readme_text)
    else:
        after_idx += 1

    before = readme_text[:start_idx]
    after = readme_text[after_idx:]
    return f"{before}{section}{after}"


def build_docs_page(date_str: str, table_md: str) -> str:
    header = textwrap.dedent(
        f"""\
        ## ðŸ§© Hugging Face Ecosystem â€” Dev Quick Picks
        <sub>Last reviewed: {date_str}</sub>
        <br>
        <sup>Opinionated, regularly used pieces that pair well with ðŸ¤—. Links go to official docs where possible.</sup>
        """
    ).strip()

    intro = (
        "This page is a curated list of developer-first libraries that integrate well "
        "with Hugging Face for training, optimization, serving, data, and UI. We keep it "
        "short and practicalâ€”if itâ€™s not used in anger monthly, we leave it out."
    )
    maintenance = "_Maintenance: Source of truth â†’ `/meta/ecosystem.yml`._"
    return "\n\n".join([header, "", intro, "", table_md.strip(), "", maintenance, ""])


def main() -> None:
    parser = argparse.ArgumentParser(description="Rebuild ecosystem quick picks table.")
    parser.add_argument("--check", action="store_true", help="Run without writing files.")
    args = parser.parse_args()

    data = load_yaml(ECOSYSTEM_YAML)
    date_str, table_md, link_rows = build_table(data)
    validate_links(link_rows)

    if args.check:
        print(table_md)
        sys.exit(0)

    readme_text = README.read_text(encoding="utf-8")
    updated_readme = replace_section(readme_text, table_md, date_str)
    README.write_text(updated_readme, encoding="utf-8")

    docs_page = build_docs_page(date_str, table_md)
    DOCS_PAGE.write_text(docs_page, encoding="utf-8")
    print("Ecosystem section updated.")


if __name__ == "__main__":
    main()
